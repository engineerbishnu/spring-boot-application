apiVersion: v1
kind: Namespace
metadata:
  name: development
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spring-boot-application
  namespace: development
spec:
  replicas: 1
  selector:
    matchLabels:
      app: spring-boot-application
  template:
    metadata:
      labels:
        app: spring-boot-application
    spec:
      containers:
      - name: spring-boot-application
        image: SPRING_BOOT_IMAGE_TAG
        ports:
        - containerPort: 8080
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: spring-boot-application-service
  namespace: development
spec:
  type: ClusterIP
  selector:
    app: spring-boot-application
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-reverse-proxy
  namespace: development
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx-reverse-proxy
  template:
    metadata:
      labels:
        app: nginx-reverse-proxy
    spec:
      containers:
      - name: nginx
        image: NGINX_IMAGE_TAG
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-reverse-proxy-service
  namespace: development
spec:
  type: LoadBalancer
  selector:
    app: nginx-reverse-proxy
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: development
data:
  nginx.conf: |
    server {
      listen 80;
      location / {
        proxy_pass http://spring-boot-application-service:8080;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
      }
    }
